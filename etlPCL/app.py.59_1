
import importlib
import os
import time
import configparser
import concurrent.futures
import subprocess
from datetime import date

from csv import reader
from csv import DictReader
import util.dbTool  as dbTool

from bo.mysql.variant_drug   import variant_drug   as drugBO
from da.mysql.variant_drugDA import variant_drugDA as drugDA
from bo.mysql.boList         import boList

def execute_command(command, exit_script = 1):

    print('Will excute  commad '+command+"\n")

    p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    response, error = p.communicate()
    if error:
        print("FAILED to run command: %s - Reason: %s"%(command,error))
        os.killpg(os.getpgrp(),2)
    return response, error


def main():
    myDir     = os.path.dirname(os.path.realpath(__file__)) #<--get current directory where this Python script located
    print('The location for this Report creater script= '+myDir)

    #0: get credential for dispatch and shards, please put your DB credentail into your home directory file "~/.my.cnf" 
    
    configParser = configparser.RawConfigParser()
    configParser.read('%s/.my.cnf' % os.path.expanduser('~'))
    myUser=''
    myPassword=''
    try:
       myUser = configParser.get('oracle', 'user')
       myPassword = configParser.get('oracle', 'password')
    except (configparser.NoSectionError, configparser.NoOptionError) as e:
        print('FAILED: Reading ini file for username/password - Reason: %s' % e)
    
    print('Got your user name %s and passwd'%(myUser))

    start_time=time.time()

    #Task1:Start process file "./etlData/Drug_database_master_20220429.txt", mapping to table variant_drug and variant_drug_class in MySQL

    dataFileName='Drug_database_master_20220429.txt'

    dataFileFullPath  = '%s/%s/%s' % (os.path.abspath('.'),'etlData',dataFileName) ##<--dataset in curret path's sub folder 'etlData'

    # convert to UTF-8
    os.system('vim +"set nobomb | set fenc=utf8 | x" '+dataFileFullPath)

    #print('--Below start csv.reader to reterieve all records from tsv--')
    
    insertVal=None
    with open(dataFileFullPath, 'r') as f:
        # pass the file object to reader() to get the reader object
        myCSVReader = reader(f,delimiter='\t', quotechar='"')
        # Get all rows of csv from csv_reader object as list of tuples
        insertVal = list(map(tuple, myCSVReader))
    print('\n---Done Of CSV.reader----\n')

    insertSQL="INSERT INTO opendata_cms_dev.variant_drugn (id,drug_name,drug_class,priority,alias1,alias2,alias3,alias4,alias5,unii,cas,drug_company) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
    insertVal=insertVal[1:]  #remove the header from myCSVReader

    mysql="truncate `opendata_cms_dev`.`variant_drugn`" #<---delete all recodrs in table variant_drug
    drugDA.runSQL(mysql) 
    drugDA.runInsertListOfTuple(insertSQL, insertVal)


    #Task2:Start process file "./etlData/In_Vivo_Database_Master_20220429.txt"i for table `opendata_cms_dev`.`variant_in_vivo`, please replace space with undr-scale in file name 

    dataFileName='In_Vivo_Database_Master_20220429.txt'

    dataFileFullPath  = '%s/%s/%s' % (os.path.abspath('.'),'etlData',dataFileName) ##<--dataset in curret path's sub folder 'etlData'

    # convert to UTF-8
    os.system('vim +"set nobomb | set fenc=utf8 | x" '+dataFileFullPath)

    #print('--Below start csv.reader to reterieve all records from tsv--')
    # Below code came from Tangan Zhao's code base
    #The purpose for belwo code si to convert date formate from 'YYYY-MM-DD' to 'MM-DD-YYYY' for MySQl and avoid insert date formate error 
    insertVal=[]
    listOfDicts = []
    with open(dataFileFullPath,'r') as f: #<---first import to List Of Dict

        listOfDicts = [
            {k: v for k, v in row.items()}  
            for row in DictReader(f, skipinitialspace=True, delimiter='\t')
        ]

    for dt in listOfDicts:   #<---then convert to List of tuple for Python connector insertMany method   

            if dt['Report_Number']:

                reportedDate = dbTool.dbTool.parseDate(dt['Reported_Date'])
                dataUpdatedDate = dbTool.dbTool.parseDate(dt['Data_Updated_Date'])
 
                insertVal.append((
                    dt['Report_Number'],
                    dt['Provider'],
                    dt['Title'],

                    dt['Data_Source'],
                    reportedDate,
                    dataUpdatedDate,

                    dt['Study_Type'],
                    dt['Therapeutic_Classes'],
                    dt['Therapeutic_Agents'],

                    dt['Model'],
                    dt['Model_Strain'],

                    dt['Model_Source'],
                    dt['Therapeutic_1_Class'],
                    dt['Therapeutic_1'],

                    dt['Administration_Method_1'],
                    dt['Dose_1'],
                    dt['Regimen_1'],

                    dt['Treatment_1_Notes'],
                    dt['Therapeutic_1_Details'],

                    dt['Therapeutic_2_Class'],
                    dt['Therapeutic_2'],
                    dt['Administration_Method_2'],
                    dt['Dose_2'],

                    dt['Regimen_2'],
                    dt['Treatment_2_Notes'],
                    dt['Therapeutic_2_Details'], 

                    dt['Variants'],
                    dt['Variant_Modifications'],
                    dt['WHO_Designation'],

                    dt['Reference_Strain'],
                    dt['Inoculation_Method'],
                    dt['Inoculation_Dose'],

                    dt['Challenge_Notes'],
                    dt['Challenge_Details'],
                    dt['Clinical_Manifestastions'],

                    dt['Viral_Load'],
                    dt['Histopathology'],
                    dt['Neutralization'],

                    dt['Antibody_Response'],
                    dt['Other_Database_Report_Number'],
                    dt['Animal_Models_Linked_Page'],
                    
                    dt['Transmission'],
                    dt['Rechallenge']
                ))


    #print('\n---Done Of CTV import to String using CSV.reader----\n')

    insertSQL="""
            insert into variant_in_vivon (
                report_number, provider, title,
                data_source, reported_date, data_updated_date,
                study_type, therapeutic_classes, therapeutic_agents,
                model, model_strain, 
                model_source, therapeutic_1_class, therapeutic_1,
                administration_method_1, dose_1, regimen_1,
                treatment_1_notes, therapeutic_1_details,
                therapeutic_2_class, therapeutic_2, administration_method_2, dose_2, 
                regimen_2, treatment_2_notes, therapeutic_2_details,
                variants, variant_modifications, who_designation,
                reference_strain, inoculation_method, inoculation_dose,
                challenge_notes, challenge_details, clinical_manifestastions, 
                viral_load, histopathology, neutralization,
                antibody_response, other_database_report_number, animal_models_linked_page,
                transmission,rechallenge 
            ) 
            VALUES (
                %s, %s, %s,
                %s, %s, %s,
                %s, %s, %s,
                %s, %s,
                %s, %s, %s,
                %s, %s, %s,
                %s, %s, 
                %s, %s, %s, %s,
                %s, %s, %s,
                %s, %s, %s,
                %s, %s, %s,
                %s, %s, %s,
                %s, %s, %s,
                %s, %s, %s
               ,%s, %s
            )
           """



    #insertVal=insertVal[1:]  #remove the header from myCSVReader

    print(insertVal)

    mysql="truncate `opendata_cms_dev`.`variant_in_vivon`" #<---delete all recodrs in table variant_drug
    drugDA.runSQL(mysql) 
    drugDA.runInsertListOfTuple(insertSQL, insertVal)


    #Task3:Start process file "./etlData/Linked_report_database_20220429.txt", mapping to table variant_linked_report in MySQL

    dataFileName='Linked_report_database_20220429.txt'

    dataFileFullPath  = '%s/%s/%s' % (os.path.abspath('.'),'etlData',dataFileName) ##<--dataset in curret path's sub folder 'etlData'

    # convert to UTF-8
    os.system('vim +"set nobomb | set fenc=utf8 | x" '+dataFileFullPath)

    #print('--Below start csv.reader to reterieve all records from tsv--')
    
    insertVal=None
    with open(dataFileFullPath, 'r') as f:
        # pass the file object to reader() to get the reader object
        myCSVReader = reader(f,delimiter='\t', quotechar='"')
        # Get all rows of csv from csv_reader object as list of tuples
        insertVal = list(map(tuple, myCSVReader))
    print('\n---Done Of CSV.reader----\n')

    insertSQL="insert into variant_linked_reportn (report_number,linked_report_number, linked_report_version) VALUES  (%s, %s, %s)"
    insertVal=insertVal[1:]  #remove the header from myCSVReader

    mysql="truncate `opendata_cms_dev`.`variant_linked_report`" #<---delete all recodrs in table variant_drug
    drugDA.runSQL(mysql) 
    drugDA.runInsertListOfTuple(insertSQL, insertVal)

    #Task4:Start process file "./etlData/ODP_database_master_20220429.txt", mapping to table variant_linked_report in MySQL

    dataFileName='ODP_database_master_20220429.txt'



    #Task 5: Start process file "./etlData/OOS_database_master_20220429.txt", mapping to table variant_oos in MySQL

    dataFileName='OOS_database_master_20220429.txt'

    dataFileFullPath  = '%s/%s/%s' % (os.path.abspath('.'),'etlData',dataFileName) ##<--dataset in curret path's sub folder 'etlData'

    # convert to UTF-8
    os.system('vim +"set nobomb | set fenc=utf8 | x" '+dataFileFullPath)

    #print('--Below start csv.reader to reterieve all records from tsv--')
    
    insertVal=[]
    listOfDicts = []
    with open(dataFileFullPath,'r') as f: #<---first import to List Of Dict

        listOfDicts = [
            {k: v for k, v in row.items()}  
            for row in DictReader(f, skipinitialspace=True, delimiter='\t')
        ]

    for dt in listOfDicts:   #<---then convert to List of tuple for Python connector insertMany method   

            if dt['oos_report_number']:

                oos_data_date = dbTool.dbTool.parseDate(dt['oos_data_date'])
 
                insertVal.append((
                    dt['oos_report_number'],
                    dt['oos_data_provider'],
                    dt['oos_data_title'],

                    dt['oos_data_source'],
                    reportedDate,
                    dataUpdatedDate,

                    dt['oos_data_source_2'],
                    oos_data_date,
                    dt['oos_data_type'],
                    dt['oos_assay_type'],

                    dt['oos_viral_lineage'],
                    dt['oos_drug_name']

                ))

    print('\n---Done Of %s----\n'%(dataFileFullPath))

    insertSQL="insert into variant_oosn (report_number, data_provider, data_title,data_source, data_source_2, data_date,data_type, assay_type, viral_lineage, drug_name) VALUES (%s, %s, %s, %s, %s, %s, %s, %s,  %s, %s)"

    insertVal=insertVal[1:]  #remove the header from myCSVReader

    mysql="truncate `opendata_cms_dev`.`variant_oosn`" #<---delete all recodrs in table variant_drug
    drugDA.runSQL(mysql) 
    drugDA.runInsertListOfTuple(insertSQL, insertVal)





    print('\n---End ETL---\n')
  
    print("Time used :", time.time() - start_time)
 
