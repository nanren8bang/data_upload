
import importlib
import os
import time
import configparser
import concurrent.futures
##import bo.reportList   as BO
##import da.mysqlDispatch.sqlExcutorDA    as sqlExcutorDA

import da.mysqlDispatch.dispatchDA  as dispatchDA
import da.mysqlDispatch.shardDA     as shardDA
##import da.mysqlDispatch.reportDA    as reportDA


import util.sqlParser               as sqlParser

def main():
    myDir     = os.path.dirname(os.path.realpath(__file__)) #<--get current directory where this Python script located
    print('The location for this Report creater script= '+myDir)

    #0: get credential for dispatch and shards, please put your DB credentail into your home directory file "~/.my.cnf" 
    
    configParser = configparser.RawConfigParser()
    configParser.read('%s/.my.cnf' % os.path.expanduser('~'))
    try:
       myUser = configParser.get('client', 'user')
       myPassword = configParser.get('client', 'password')
    except (ConfigParser.NoSectionError, ConfigParser.NoOptionError) as e:
        print('FAILED: Reading ini file for username/password - Reason: %s' % e)
    print('Got your user name %s and passwd'%(myUser))


    #1, get SQLs from file which located in your home directory "~/mySQL4Report.sql"

    mySQL4ExcutorFile  = '%s/mySQL4Report.sql' % os.path.expanduser('~') 
    mySQL4ExcutorList=[]
    #mySQL4ExcutorList.append('SET SESSION expand_fast_index_creation = ON;')
    #mySQL4ExcutorList.append('SET SESSION foreign_key_checks = 0;')
    mySQL4ExcutorList.extend(sqlParser.sqlParser.getSQLListFromFile(mySQL4ExcutorFile))
    #sqlParser.sqlParser.getColumsFromSQLFile(mySQL4ExcutorFile)
    ##sqlParser.sqlParser.csv2BOFile(' first_name,last_name , birth_date ,SSN,CIF ')
    
    print('--Below are all SQL for report from file ~\mySQL4Report.sql----')
    sql4Report=''
    for tempSQL in mySQL4ExcutorList:
        sql4Report=tempSQL 
        print(sql4Report)
        ##print(sqlParser.sqlParser.getCSVColumnStr(tempSQL))
    
    ##2: create report.py in BO layer
    ##myShardList=dispatchDA.dispatchDA.getSlaveShardList()
    myShardList=dispatchDA.dispatchDA.getSlaveShardListById(7)  ##for report BO file , one is enough
    
    if myShardList:
        print('---We got shardList, see below ----')
    for myShard in myShardList:
        print('__Create Report for  Shard: '+str(myShard.id)+'__'+myShard.ip+'__'+myShard.vip )
        i=0
        tempGroupList=dispatchDA.dispatchDA.getGroupListByShardId(myShard.id)
        for myGroup in tempGroupList:
            i=i+1
            if i<=1: ## this will try first 10 group , if first  group return nothing , chang this number bigger and try again
                myGroup.mysqlServer=myShard.vip.split('.empoweredbenefits.com')[0]
                myGroup.mysqlUser=myUser
                myGroup.mysqlPassword=myPassword
                ##reportDA.reportDA.getReportCSVColumnHeader(myGroup, sql4Report)
                ##reportCSVColumnStr=reportDA.reportDA.getReportCSVColumnHeader(myGroup, sql4Report)
                reportCSVColumnStr=sqlParser.sqlParser.getReportCSVColumnHeader(myGroup, sql4Report)
                ##print('-->The report header CSV string: '+reportCSVColumnStr )
                if reportCSVColumnStr:
                    print(reportCSVColumnStr)
                    sqlParser.sqlParser.csv2BOFile(reportCSVColumnStr )              ## This will run multitime if there are many Shards.
                    BO = importlib.import_module('bo.reportList')                    ##Dynamiclly load report List
                    reportDA= importlib.import_module('da.mysqlDispatch.reportDA')   ##Dynamiclly load reportDA

    ##3: get shards list from dispatch server
   
    ##3.1 Get slave shard list
    myShardList=dispatchDA.dispatchDA.getSlaveShardList()
    ##myShardList=dispatchDA.dispatchDA.getSlaveShardListById(4)  ##for report BO file , one is enough
 

    ##32: get Group/DB name/server name/DB name for each shard
    start_time=time.time()
    for myShard in myShardList:
        print('__Create Report for  Shard: '+str(myShard.id)+'__'+myShard.ip+'__'+myShard.vip )
        tempGroupList=dispatchDA.dispatchDA.getGroupListByShardId(myShard.id)
        for myGroup in tempGroupList:
            myGroup.mysqlServer=myShard.vip.split('.empoweredbenefits.com')[0]
            myGroup.mysqlUser=myUser
            myGroup.mysqlPassword=myPassword
            #print('   group-> '+myGroup.toCSV())
  
        #3.3: run Report for each shard 
        print('---start to run report for ech shard--- ')

        BO = importlib.import_module('bo.reportList') ##Dynamiclly load report List
        reportDA= importlib.import_module('da.mysqlDispatch.reportDA') ##Dynamiclly load reportDA
        myReportList=BO.reportList()
 
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = []
            i=0
            for myGroup in tempGroupList:
                i=i+1
                print('G#= '+str(i))
                if i%1000==0:
                    print('pause for 3 seconds every 1000 connections')
                    time.sleep(3)
                futures.append(executor.submit(reportDA.reportDA.getReport4Group,myGroup,sql4Report,  myReportList.reportList))
                 #futures.append(executor.submit(reportDA.reportDA.getReport4Group,myGroup,  myReportList))
            i=0
            for future in concurrent.futures.as_completed(futures):
                i=i+1
                print(str(i)+f" ---Report outcome is {future.result()}")
        #myReportList.toTSV(str(myShard.id)+'.eb')           ##<---for TSV format report
        myReportList.toCSV(str(myShard.id)+'.eb')           ##<---for CSV format report

    ##3.4 create report column header with CSV format  
    #myReportList.toTSVHeader('report4Shards.tsv')           ##<---for TSV format report
    myReportList.toCSVHeader('report4Shards.csv')           ##<---for CSV format report
    
    print('End running report ...........')
  
    print("Time used :", time.time() - start_time)
 
